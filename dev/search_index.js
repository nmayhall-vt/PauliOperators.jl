var documenterSearchIndex = {"docs":
[{"location":"functions/","page":"Funcitons","title":"Funcitons","text":"CurrentModule = PauliOperators","category":"page"},{"location":"functions/#Functions","page":"Funcitons","title":"Functions","text":"","category":"section"},{"location":"functions/","page":"Funcitons","title":"Funcitons","text":"Modules = [PauliOperators]\nOrder   = [:function]","category":"page"},{"location":"functions/#Base.:*-Union{Tuple{N}, Tuple{Pauli{N}, Pauli{N}}} where N","page":"Funcitons","title":"Base.:*","text":"Base.:*(p1::Pauli{N}, p2::Pauli{N}) where {N}\n\nMultiply two Pauli's together\n\n\n\n\n\n","category":"method"},{"location":"functions/#Base.:*-Union{Tuple{T}, Tuple{N}, Tuple{Dict{DyadBasis{N}, T}, Dict{DyadBasis{N}, T}}} where {N, T}","page":"Funcitons","title":"Base.:*","text":"Base.:*(d1::DyadSum{N,T}, d2::DyadSum{N,T}) where {N,T}\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#Base.:*-Union{Tuple{T}, Tuple{N}, Tuple{Dict{PauliBasis{N}, T}, Dict{PauliBasis{N}, T}}} where {N, T}","page":"Funcitons","title":"Base.:*","text":"Base.:*(ps1::PauliSum{N}, ps2::PauliSum{N}) where {N}\n\nMultiply two PauliSums. \n\n\n\n\n\n","category":"method"},{"location":"functions/#Base.:*-Union{Tuple{T}, Tuple{N}, Tuple{Dict{PauliBasis{N}, T}, LinearAlgebra.Adjoint{<:Any, Dict{PauliBasis{N}, T}}}} where {N, T}","page":"Funcitons","title":"Base.:*","text":"Base.:*(ps1::PauliSum{N, T}, ps2::Adjoint{<:Any, PauliSum{N, T}}) where {N, T}\n\nMultiply two PauliSums. \n\n\n\n\n\n","category":"method"},{"location":"functions/#Base.:*-Union{Tuple{T}, Tuple{N}, Tuple{LinearAlgebra.Adjoint{<:Any, Dict{PauliBasis{N}, T}}, Dict{PauliBasis{N}, T}}} where {N, T}","page":"Funcitons","title":"Base.:*","text":"Base.:*(ps1::Adjoint{<:Any, PauliSum{N, T}}, ps2::PauliSum{N, T}) where {N, T}\n\nMultiply two PauliSums. \n\n\n\n\n\n","category":"method"},{"location":"functions/#Base.:*-Union{Tuple{T}, Tuple{N}, Tuple{LinearAlgebra.Adjoint{<:Any, Dict{PauliBasis{N}, T}}, LinearAlgebra.Adjoint{<:Any, Dict{PauliBasis{N}, T}}}} where {N, T}","page":"Funcitons","title":"Base.:*","text":"Base.:*(ps1::Adjoint{<:Any, PauliSum{N, T}}, ps2::Adjoint{<:Any, PauliSum{N, T}}) where {N, T}\n\nMultiply two PauliSums. \n\n\n\n\n\n","category":"method"},{"location":"functions/#Base.:+-Union{Tuple{N}, Tuple{Bra{N}, Bra{N}}} where N","page":"Funcitons","title":"Base.:+","text":"Base.:+(p::Bra{N}, q::Bra{N}) where N\n\nAdd two Ket's together, return a KetSum\n\n\n\n\n\n","category":"method"},{"location":"functions/#Base.:+-Union{Tuple{N}, Tuple{Ket{N}, Ket{N}}} where N","page":"Funcitons","title":"Base.:+","text":"Base.:+(p::Ket{N}, q::Ket{N}) where N\n\nAdd two Ket's together, return a KetSum\n\n\n\n\n\n","category":"method"},{"location":"functions/#Base.:+-Union{Tuple{N}, Tuple{Union{Dyad{N}, DyadBasis{N}}, Union{Dyad{N}, DyadBasis{N}}}} where N","page":"Funcitons","title":"Base.:+","text":"Base.:+(p::DyadBasis{N}, q::DyadBasis{N}) where N\n\nAdd two Dyad's together, return a DyadSum\n\n\n\n\n\n","category":"method"},{"location":"functions/#Base.:+-Union{Tuple{N}, Tuple{Union{Pauli{N}, PauliBasis{N}}, Union{Pauli{N}, PauliBasis{N}}}} where N","page":"Funcitons","title":"Base.:+","text":"Base.:+(p::Pauli{N}, q::Pauli{N}) where N\n\nAdd two Pauli's together, return a PauliSum\n\n\n\n\n\n","category":"method"},{"location":"functions/#Base.:+-Union{Tuple{T}, Tuple{N}, Tuple{Dict{DyadBasis{N}, T}, Dict{DyadBasis{N}, T}}} where {N, T}","page":"Funcitons","title":"Base.:+","text":"Base.:+(ps1::DyadSum{N}, ps2::DyadSum{N}) where {N}\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#Base.:--Tuple{Dict{PauliBasis{N}} where N, Dict{PauliBasis{N}} where N}","page":"Funcitons","title":"Base.:-","text":"Base.:-(ps1::PauliSum, ps2::PauliSum)\n\nSubtract two PauliSums. \n\n\n\n\n\n","category":"method"},{"location":"functions/#Base.:--Tuple{Dict{PauliBasis{N}} where N}","page":"Funcitons","title":"Base.:-","text":"Base.:-(ps1::PauliSum, ps2::PauliSum)\n\nSubtract two PauliSums. \n\n\n\n\n\n","category":"method"},{"location":"functions/#Base.:--Union{Tuple{Pauli{N}}, Tuple{N}} where N","page":"Funcitons","title":"Base.:-","text":"Base.:-(p::Pauli{N}) where {N}\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#Base.Multimedia.display-Union{Tuple{Pauli{N}}, Tuple{N}} where N","page":"Funcitons","title":"Base.Multimedia.display","text":"Base.display(p::Pauli{N}) where N\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#Base.adjoint-Union{Tuple{Pauli{N}}, Tuple{N}} where N","page":"Funcitons","title":"Base.adjoint","text":"Base.adjoint(p::Pauli)\n\n\nPauli{N}(s,z,x)  =  s ⋅ z₁...|x₁... \n                 =  s ⋅ i^-θs ⋅ P₁⊗...⊗Pₙ\n                 =  coeff ⋅ P₁⊗...⊗Pₙ\n\nSince the PauliBasis is Hermitian, we have that     Pauli' = coeff' ⋅ P₁⊗...⊗Pₙ\n\n\n\n\n\n","category":"method"},{"location":"functions/#Base.rand-Union{Tuple{Type{Pauli{N}}}, Tuple{N}} where N","page":"Funcitons","title":"Base.rand","text":"rand(Pauli{N})\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#Base.show-Tuple{IO, Union{Bra, Ket}}","page":"Funcitons","title":"Base.show","text":"Base.show(io::IO, P::Pauli{N}) where N\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#Base.show-Union{Tuple{T}, Tuple{N}, Tuple{IO, Dict{Ket{N}, T}}} where {N, T}","page":"Funcitons","title":"Base.show","text":"Base.show(io::IO, v::KetSum{N,T}) where {N,T}\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#Base.string-Union{Tuple{PauliBasis{N}}, Tuple{N}} where N","page":"Funcitons","title":"Base.string","text":"Base.string(p::Pauli{N}) where N\n\nDisplay, y = iY\n\n\n\n\n\n","category":"method"},{"location":"functions/#Base.string-Union{Tuple{Pauli{N}}, Tuple{N}} where N","page":"Funcitons","title":"Base.string","text":"Base.string(p::Pauli{N}) where N\n\nDisplay, y = iY\n\n\n\n\n\n","category":"method"},{"location":"functions/#Base.sum!-Union{Tuple{N}, Tuple{Dict{PauliBasis{N}}, Dict{PauliBasis{N}}}} where N","page":"Funcitons","title":"Base.sum!","text":"Base.sum!(p1::PauliSum{N}, p2::PauliSum{N}) where {N}\n\nAdd two PauliSums. \n\n\n\n\n\n","category":"method"},{"location":"functions/#LinearAlgebra.dot-Union{Tuple{TT}, Tuple{T}, Tuple{N}, Tuple{Dict{Ket{N}, T}, Dict{Ket{N}, TT}}} where {N, T, TT}","page":"Funcitons","title":"LinearAlgebra.dot","text":"LinearAlgebra.dot(v1::KetSum{N,T}, v2::KetSum{N,TT}) where {N,T,TT}\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#LinearAlgebra.ishermitian-Tuple{Pauli}","page":"Funcitons","title":"LinearAlgebra.ishermitian","text":"ishermitian(p::Pauli)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#PauliOperators.clip!-Union{Tuple{Dict{DyadBasis{N}, T}}, Tuple{T}, Tuple{N}} where {N, T}","page":"Funcitons","title":"PauliOperators.clip!","text":"clip!(ps::PauliSum; thresh=1e-16)\n\nDelete Dyad's with coeffs smaller than thresh\n\n\n\n\n\n","category":"method"},{"location":"functions/#PauliOperators.osum-Union{Tuple{M}, Tuple{N}, Tuple{Pauli{N}, Pauli{M}}} where {N, M}","page":"Funcitons","title":"PauliOperators.osum","text":"osum(p1::Pauli{N}, p2::Pauli{M}) where {N,M}\n\nReturns the direct sum of two Paulis\n\n\n\n\n\n","category":"method"},{"location":"functions/#PauliOperators.otimes-Union{Tuple{M}, Tuple{N}, Tuple{Pauli{N}, Pauli{M}}} where {N, M}","page":"Funcitons","title":"PauliOperators.otimes","text":"otimes(p1::Pauli{N}, p2::Pauli{M}) where {N,M}\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#PauliOperators.otimes-Union{Tuple{T}, Tuple{M}, Tuple{N}, Tuple{Dict{DyadBasis{N}, T}, Dict{DyadBasis{M}, T}}} where {N, M, T}","page":"Funcitons","title":"PauliOperators.otimes","text":"otimes(p1::DyadSum{N,T}, p2::DyadSum{M,T}) where {N,M,T}\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#PauliOperators.otimes-Union{Tuple{T}, Tuple{M}, Tuple{N}, Tuple{Dict{Ket{N}, T}, Dict{Ket{M}, T}}} where {N, M, T}","page":"Funcitons","title":"PauliOperators.otimes","text":"otimes(p1::KetSum{N,T}, p2::KetSum{M,T}) where {N,M,T}\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#PauliOperators.otimes-Union{Tuple{T}, Tuple{M}, Tuple{N}, Tuple{Dict{PauliBasis{N}, T}, Dict{PauliBasis{M}, T}}} where {N, M, T}","page":"Funcitons","title":"PauliOperators.otimes","text":"otimes(p1::PauliSum{N}, p2::PauliSum{M}) where {N,M}\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"functions/#PauliOperators.scale!-Union{Tuple{T}, Tuple{N}, Tuple{Dict{Ket{N}, T}, Number}} where {N, T}","page":"Funcitons","title":"PauliOperators.scale!","text":"scale!(v1::KetSum{N,T}, a::Number) where {N,T}\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = PauliOperators","category":"page"},{"location":"#PauliOperators","page":"Home","title":"PauliOperators","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for PauliOperators.","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"CurrentModule = PauliOperators","category":"page"},{"location":"types/#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Modules = [PauliOperators]\nPublic = true \nOrder = [:type]","category":"page"},{"location":"types/#Base.Matrix-Tuple{Pauli}","page":"Types","title":"Base.Matrix","text":"Base.Matrix(p::Pauli{N}) where N\n\nBuild dense matrix representation in standard basis\n\n\n\n\n\n","category":"method"},{"location":"types/#Base.Matrix-Union{Tuple{Dict{PauliBasis{N}, T}}, Tuple{T}, Tuple{N}} where {N, T}","page":"Types","title":"Base.Matrix","text":"Base.Matrix(ps::PauliSum{N}; T=ComplexF64) where N\n\nCreate a dense Matrix of type T in the standard basis\n\n\n\n\n\n","category":"method"},{"location":"types/#Base.Matrix-Union{Tuple{PauliBasis{N}}, Tuple{N}} where N","page":"Types","title":"Base.Matrix","text":"Base.Matrix(p::PauliBasis{N}) where N\n\nBuild dense matrix representation in standard basis\n\n\n\n\n\n","category":"method"},{"location":"types/#Base.Vector-Union{Tuple{Dict{Ket{N}, T}}, Tuple{T}, Tuple{N}} where {N, T}","page":"Types","title":"Base.Vector","text":"Base.Vector(k::KetSum{N,T}) where {N,T}\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"types/#Base.Vector-Union{Tuple{Union{Bra{N}, Ket{N}}}, Tuple{N}} where N","page":"Types","title":"Base.Vector","text":"Base.Vector(k::Union{Ket{N}, Bra{N}}; T=Int64) where N\n\nCreate dense vector representation in standard basis \n\n\n\n\n\n","category":"method"},{"location":"types/#PauliOperators.Dyad","page":"Types","title":"PauliOperators.Dyad","text":"An occupation number vectors, up to 128 qubits\n\n\n\n\n\n","category":"type"},{"location":"types/#PauliOperators.Dyad-Tuple{Integer, Integer, Integer}","page":"Types","title":"PauliOperators.Dyad","text":"Dyad(N::Integer, k::Integer, b::Integer)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"types/#PauliOperators.Dyad-Union{Tuple{T}, Tuple{Vector{T}, Vector{T}}} where T<:Integer","page":"Types","title":"PauliOperators.Dyad","text":"Dyad(ket::Vector{T}, bra::Vector{T}) where T<:Union{Bool, Integer}\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"types/#PauliOperators.DyadBasis","page":"Types","title":"PauliOperators.DyadBasis","text":"A basis for Dyad's, which is not closed under multiplication.  Since the product of two arbitrary dyad's don't generally create another dyad (e.g., while |i><j| * |j><l| = |i><l|, most products create scalars: |i><j| * |k><l| = 0). As such the product of two DyadBasis objects is not a DyadBasis object, but a Dyad, which contains a scalar factor.  This type is primarily used to provide a basis for linear combinations of Dyad's, e.g., DyadSum's.\n\n\n\n\n\n","category":"type"},{"location":"types/#PauliOperators.DyadBasis-Tuple{Integer, Integer, Integer}","page":"Types","title":"PauliOperators.DyadBasis","text":"DyadBasis(N::Integer, k::Integer, b::Integer)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"types/#PauliOperators.DyadBasis-Union{Tuple{T}, Tuple{Vector{T}, Vector{T}}} where T<:Integer","page":"Types","title":"PauliOperators.DyadBasis","text":"DyadBasis(ket::Vector{T}, bra::Vector{T}) where T<:Union{Bool, Integer}\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"types/#PauliOperators.Ket","page":"Types","title":"PauliOperators.Ket","text":"An occupation number vector, up to 128 qubits\n\n\n\n\n\n","category":"type"},{"location":"types/#PauliOperators.Ket-Tuple{Integer, Integer}","page":"Types","title":"PauliOperators.Ket","text":"Ket(N::Integer, v::Integer)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"types/#PauliOperators.Ket-Union{Tuple{Vector{T}}, Tuple{T}} where T<:Integer","page":"Types","title":"PauliOperators.Ket","text":"Ket(vec::Vector{T}) where T<:Union{Bool, Integer}\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"types/#PauliOperators.Pauli","page":"Types","title":"PauliOperators.Pauli","text":"Pauli{N}\n\nis our basic type for representing Pauli operators acting on N. Assume we want to represent a Pauli string of the following form:\n\nσ1 ⊗ σ2 ⊗ σ3 ⊗ ⋯ ⊗ σN,\n\nwhere, σ ∈ {X, Y, Z, I}. To do this efficiently, we use the symplectic representation of the Pauli group,  where we factor each Pauli into a product of X and Z operators: \n\nσ = i^(3*(z+x)%2) Zᶻ Xˣ,\n\nwith z,x ∈ {0,1}. The phase factor comes from the fact that Z*X = iY. In this representation, any tensor product of Pauli's is represented as two binary strings, one for x and one for z, along with the associated phase accumulated from each site. The format is as follows: \n\ni^θ   Z^z₁ ⋅ X^x₁ ⊗ Z^z₂ ⋅ X^x₂ ⊗ ⋯ ⊗ Z^zₙ ⋅ X^xₙ\n\nProducts of operators simply concatonate the left and right strings separately. For example,  To create a Y operator, bits in the same locations in z and x should be on. \n\nXYZIy = 11001|01101     where y = iY\n\nSince we get a factor of i each time we create a Y operator, we need to keep track of this to cancel the  phase θs, arising from the ZX factorization.\n\nP₁⊗...⊗Pₙ = i^θs ⋅ z₁...|x₁...  where Pᵢ ∈ {I,X,Y,Z}.\n\nsimilarly, \n\nz₁...|x₁... = i^-θs ⋅ P₁⊗...⊗Pₙ\n\nWe use θs to denote the phase needed to make the Pauli operator Hermitian and positive, and we refer to this as the symplectic_phase, since it arises solely from the symplectic representation of the Pauli. However, this is not the only phase we need to worry about. Since various phases accumulate during Pauli multiplication, we allow a given Pauli to have an arbitrary global phase, θg, so that the Pauli type can be closed under multiplication. As such, our Pauli phases are defined according to the following:\n\nPauli{N}(s,z,x)  =  s ⋅ z₁...|x₁... \n                 =  s ⋅ i^-θs ⋅ P₁⊗...⊗Pₙ\n                 =  coeff ⋅ P₁⊗...⊗Pₙ\n\nPauliBasis{N}(z,x)  =  i^θs ⋅ z₁...|x₁... \n                        =  P₁⊗...⊗Pₙ\n\nPhase definitions:\n\nsymplectic_phase: θs - phase needed to cancel the phase arising from the ZX factorized form: θs = θ-θg\n\nSince we need to keep track of a phase for a Pauli, we might as well let it become a general scalar value for broader use. As such, Pauli.s is a arbitrary complex number.\n\n\n\n\n\n","category":"type"},{"location":"types/#PauliOperators.Pauli-Tuple{Integer}","page":"Types","title":"PauliOperators.Pauli","text":"Pauli(N::Integer; X=[], Y=[], Z=[])\n\nconstructor for creating PauliBoolVec by specifying the qubits where each X, Y, and Z gates exist \n\n\n\n\n\n","category":"method"},{"location":"types/#PauliOperators.Pauli-Tuple{String}","page":"Types","title":"PauliOperators.Pauli","text":"Pauli(str::String)\n\nCreate a Pauli from a string, e.g., \n\na = Pauli(\"XXYZIZ\")\n\nThis is convieniant for manual manipulations, but is not type-stable so will be slow.\n\n\n\n\n\n","category":"method"},{"location":"types/#PauliOperators.Pauli-Union{Tuple{I}, Tuple{I, I, Any}} where I<:Integer","page":"Types","title":"PauliOperators.Pauli","text":"Pauli(z::I, x::I) where I<:Integer\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"types/#PauliOperators.PauliBasis","page":"Types","title":"PauliOperators.PauliBasis","text":"z::Int128\nx::Int128\n\nA positive, Hermitian Pauli, used as a basis for more general Pauli's (which can have a complex phase). These are primarily used to provide a basis for linear combinations of Paulis, e.g., PauliSum's.\n\nPauliBasis{N}(z,x)  =  i^θs ⋅ z₁...|x₁... \n                        =  P₁⊗...⊗Pₙ\n\nPhase definitions:\n\nsymplectic_phase: θs - phase needed to cancel the phase arising from the ZX factorized form: θs = θ-θg\n\n\n\n\n\n","category":"type"},{"location":"types/#PauliOperators.PauliBasis-Union{Tuple{Pauli{N}}, Tuple{N}} where N","page":"Types","title":"PauliOperators.PauliBasis","text":"PauliBasis(p::Pauli{N}) where N\n\nReturn the PauliBasis with the same operator part as p\n\n\n\n\n\n","category":"method"},{"location":"types/#PauliOperators.PauliSum","page":"Types","title":"PauliOperators.PauliSum","text":"PauliSum{N, T} = Dict{Tuple{Int128,Int128},T}\n\nA collection of Paulis, joined by addition. This uses a Dict to store them, however, the specific use cases should probably dictate the container type, so this will probably be removed.\n\n\n\n\n\n","category":"type"}]
}
